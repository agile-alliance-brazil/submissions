- title t('title.edit_conference')
- show_actions!

= semantic_form_for @conference, html: {:'data-visible' => @conference.visible?} do |form|
  = form.inputs do
    .logo{class: @conference.errors[:logo].empty? ? '' : 'error' }
      = image_tag(@conference.logo.try(:url, :medium) || "#{@conference.year}_logo.png", class: 'logo_preview image_preview', alt: 'Logo da ConferÃªncia')
      = form.file_field :logo, class: 'image_field'
      %ul.errors
        - @conference.errors[:logo].each do |error_message|
          %li.error.message= error_message
    = form.input :location, required: true, input_html: {tabindex: autotab}
    = form.input :start_date, required: true, as: :date_picker, input_html: {tabindex: autotab, dateindex: 9, class: 'conference_date'}
    = form.input :end_date, required: true, as: :date_picker, input_html: {tabindex: autotab, dateindex: 10, class: 'conference_date'}
    = form.input :call_for_papers, as: :date_picker, input_html: {tabindex: autotab, dateindex: 0, value: @conference.call_for_papers.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :submissions_open, required: true, as: :date_picker, input_html: {tabindex: autotab, dateindex: 1,  value: @conference.submissions_open.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :presubmissions_deadline, as: :date_picker, input_html: {tabindex: autotab, dateindex: 2, value: @conference.presubmissions_deadline.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :prereview_deadline, as: :date_picker, input_html: {tabindex: autotab, dateindex: 3, value: @conference.prereview_deadline.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :submissions_deadline, required: true, as: :date_picker, input_html: {tabindex: autotab, dateindex: 4, value: @conference.submissions_deadline.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :submissions_edition_deadline, required: true, as: :date_picker, input_html: {tabindex: autotab, dateindex: 4, value: @conference.submissions_edition_deadline.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :voting_deadline, as: :date_picker, input_html: {tabindex: autotab, dateindex: 5, value: @conference.voting_deadline.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :review_deadline, required: true, as: :date_picker, input_html: {tabindex: autotab, dateindex: 6, value: @conference.review_deadline.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :author_notification, required: true, as: :date_picker, input_html: {tabindex: autotab, dateindex: 7, value: @conference.author_notification.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :author_confirmation, required: true, as: :date_picker, input_html: {tabindex: autotab, dateindex: 8, value: @conference.author_confirmation.try(:strftime, '%F'), class: 'conference_date'}
    = form.input :tag_list, input_html: {tabindex: autotab, :'data-autocomplete-url' => tags_path(format: :json), maxlength: nil, value: (@conference.tag_list||[]).join(',')}, as: :hidden
    = form.input :submission_limit, required: true, min: 0, step: 1, type: 'number', input_html: {tabindex: autotab}
    = form.input :tag_limit, required: true, min: 0, step: 1, type: 'number', input_html: {tabindex: autotab}
    %li
      %label= t('formtastic.labels.conference.tag_list')
      %ul.conferenceTags.tags
        - @tags.sort{|x, y| I18n.t(x) <=> I18n.t(y)}.each do |tag|
          %li{:'data-tag' => tag}= t(tag)
    = form.input :allow_free_form_tags, input_html: {tabindex: autotab}
  - unless @conference.visible?
    = form.input :visible, required: true, input_html: {tabindex: autotab}
  = form.actions do
    = form.action :submit, label: :update_conference, button_html: {tabindex: autotab}

= render layout: 'translated_contents/form', locals: {collection: @conference.tracks, new_element: @new_track} do |f|
  %div

= render layout: 'translated_contents/form', locals: {collection: @conference.session_types, new_element: @new_session_type} do |f|
  %div.durations
    %h6= t('formtastic.labels.session_type.valid_durations')
    - (f.object.valid_durations + common_durations).uniq.each do |duration|
      %label
        = f.check_box :valid_durations, { multiple: true, class: 'duration', disabled: (!f.object.new_record?) && @conference.visible?}, duration, nil
        = t('formtastic.labels.session_type.session_duration', duration: duration)
    %label.duration_template
      = f.check_box :valid_durations, { multiple: true, class: 'duration', disabled: (!f.object.new_record?) && @conference.visible?}, '%duration', nil
      = t('formtastic.labels.session_type.session_duration', duration: '%duration')
    %span.new_duration
      = text_field_tag(:another_duration, nil, size: 5, maxlength: 3, placeholder: t('formtastic.labels.session_type.duration_placeholder'), class: 'duration_input', disabled: (!f.object.new_record?) && @conference.visible?)
      = button_tag(t('formtastic.labels.session_type.add_other_duration'), disabled: true, class: 'add_other_duration')
  %label.field
    %span.text= t('formtastic.labels.session_type.needs_audience_limit')
    = f.check_box(:needs_audience_limit, class: 'needs_audience_limit requirement', disabled: (!f.object.new_record?) && @conference.visible?)
  %label.field
    %span.text= t('formtastic.labels.session_type.needs_mechanics')
    = f.check_box(:needs_mechanics, class: 'needs_mechanics requirement', disabled: (!f.object.new_record?) && @conference.visible?)

= render layout: 'translated_contents/form', locals: {collection: @conference.audience_levels, new_element: @new_audience_level} do |f|
  %div

= render layout: 'translated_contents/form', locals: {collection: @conference.pages, new_element: @new_page} do |f|
  %label.field
    %span.text= t('formtastic.labels.page.path')
    = f.text_field(:path, disabled: !f.object.new_record?, class: 'path')
  %label.field
    %span.text= t('formtastic.labels.page.show_in_menu')
    = f.check_box(:show_in_menu, checked: f.object.show_in_menu? || (f.object.path == 'home'), class: 'show_in_menu')
